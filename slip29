import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.decomposition import PCA
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

data=pd.read_csv("iris.csv")
x = data[["SepalLengthCm","SepalWidthCm","PetalLengthCm","PetalWidthCm"]]
y = data["Species"]

pca = PCA(n_components=2)
X_reduced = pca.fit_transform(x)

X_train, X_test, y_train, y_test = train_test_split(X_reduced, y, test_size=0.2, random_state=42)

knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train, y_train)

y_pred = knn.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print(f'KNN Model Accuracy: {accuracy * 100:.2f}%')

new_flower = [[5.9, 3.0, 5.1, 1.8]]

new_flower_reduced = pca.transform(new_flower)

predicted_class = knn.predict(new_flower_reduced)
print(predicted_class)



import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import silhouette_score
import matplotlib.pyplot as plt
import seaborn as sns
df = pd.read_csv('employee_data.csv')
df.dropna(inplace=True)
data = df[['Age', 'Experience', 'Income']]
scaler = StandardScaler()
scaled_data = scaler.fit_transform(data)
inertia = [] 
for k in range(1, 11):
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(scaled_data)
    inertia.append(kmeans.inertia_)
plt.figure(figsize=(8, 5))
plt.plot(range(1, 11), inertia, marker='o')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Inertia (Sum of Squared Distances)')
plt.title('Elbow Method for Optimal k')
plt.show()
optimal_k = 3 
kmeans = KMeans(n_clusters=optimal_k, random_state=42)
df['Cluster'] = kmeans.fit_predict(scaled_data)
plt.figure(figsize=(8, 5))
sns.scatterplot(data=df, x='Income', y='Experience', hue='Cluster', palette='Set1', s=100)
plt.title('Employee Clusters Based on Income and Experience')
plt.show()
cluster_centers = scaler.inverse_transform(kmeans.cluster_centers_)
print("Cluster Centers:\n", cluster_centers)







