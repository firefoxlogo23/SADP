import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import AgglomerativeClustering
import scipy.cluster.hierarchy as sch
import matplotlib.pyplot as plt

data = pd.read_csv('Mall customers.csv')

X = data.drop(['Region', 'Channel'], axis=1)

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

agg_clustering = AgglomerativeClustering(n_clusters=3, linkage='ward')

clusters = agg_clustering.fit_predict(X_scaled)

data['Cluster'] = clusters
print(data)

dendrogram = sch.dendrogram(sch.linkage(X_scaled, method='ward'))
plt.title('Dendrogram')
plt.xlabel('Customers')
plt.ylabel('Euclidean Distances')
plt.show()

print(data['Cluster'].value_counts())

cluster_summary = data.groupby('Cluster').mean()
print(cluster_summary)












import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error
data=pd.read_csv("housing.csv")
print(data)
x=data[["sqft_living"]]
y=data.price
xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.2)
lr=LinearRegression()
lr.fit(xtrain,ytrain)
ypred=lr.predict(xtest)
cm=mean_absolute_error(ytest,ypred)
from sklearn.preprocessing import PolynomialFeatures
pr=PolynomialFeatures(degree=2)
xpoly=pr.fit_transform(x)
poreg=LinearRegression()
poreg.fit(xpoly,y)
print(lr.intercept_)
print(lr.coef_)
print(poreg.intercept_)
print(poreg.coef_)
print(lr.predict([[1000]]))
print(poreg.predict(pr.fit_transform([[1000]])))
